version: "{build}"

image: Visual Studio 2019

branches:
  only:
    - main
    - /v\d+\..+/
    - /release.*/
    - appveyor
    - hunter

clone_depth: 100

environment:
  matrix:
    - CUDA_VER: "11.8.0"
      XHASH_CUDA_ARCHS: "70;75;80;86;89"
    - CUDA_VER: "13.0.2"
      XHASH_CUDA_ARCHS: "80;86;89;90"
  HUNTER_CACHE_TOKEN:
    secure: VnpF1MH5MEFvUI5MiMMMFlmbDdst+bfom5ZFVgalYPp/SYDhbejjXJm9Dla/IgpC

cache:
  - C:\CUDAInstallers\cuda_11.8.0_522.06_windows.exe       -> appveyor.yml
  - C:\CUDAInstallers\cuda_13.0.2_windows.exe              -> appveyor.yml

install: |
  git submodule update --init --recursive

  rem ----- Map CUDA_VER -> installer filename and URL -----
  if "%CUDA_VER%"=="11.8.0" set "CUDA_ARCHIVE=cuda_11.8.0_522.06_windows.exe"
  if "%CUDA_VER%"=="11.8.0" set "CUDA_URL=https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/%CUDA_ARCHIVE%"

  if "%CUDA_VER%"=="13.0.2" set "CUDA_ARCHIVE=cuda_13.0.2_windows.exe"
  if "%CUDA_VER%"=="13.0.2" set "CUDA_URL=https://developer.download.nvidia.com/compute/cuda/13.0.2/local_installers/%CUDA_ARCHIVE%"

  if not exist "C:\CUDAInstallers" mkdir "C:\CUDAInstallers"
  if exist "C:\CUDAInstallers\%CUDA_ARCHIVE%" echo Using cached installer: C:\CUDAInstallers\%CUDA_ARCHIVE%
  if not exist "C:\CUDAInstallers\%CUDA_ARCHIVE%" echo Downloading %CUDA_ARCHIVE% ...
  if not exist "C:\CUDAInstallers\%CUDA_ARCHIVE%" curl -L "%CUDA_URL%" -o "C:\CUDAInstallers\%CUDA_ARCHIVE%"

  rem ----- Workaround: extract the SFX and run setup.exe -----
  set "CUDA_EXTRACT=C:\CUDAExtract\%CUDA_VER%"
  if not exist "%CUDA_EXTRACT%" mkdir "%CUDA_EXTRACT%"
  7z x "C:\CUDAInstallers\%CUDA_ARCHIVE%" -o"%CUDA_EXTRACT%" -y

  rem ----- Silent install Toolkit only (no driver) -----
  "%CUDA_EXTRACT%\setup.exe" -s toolkit

  rem ----- Set CUDA_PATH and PATH -----
  set "CUDA_MAJOR_MINOR=%CUDA_VER:~0,4%"
  set "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v%CUDA_MAJOR_MINOR%"
  set "PATH=%CUDA_PATH%\bin;%PATH%"

  nvcc -V

  rem Python tools
  set "PATH=C:\Python39-x64;C:\Python39-x64\Scripts;%PATH%"
  pip install --disable-pip-version-check requests gitpython

build_script:
  - cmd: |
      rem ----- Choose VS toolchain/generator (no parentheses, no goto) -----
      set "GEN=Visual Studio 16 2019"
      set "VC_CMD=%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Community\Common7\Tools\VsMSBuildCmd.bat"
      if "%CUDA_VER%"=="13.0.2" set "GEN=Visual Studio 17 2022"
      if "%CUDA_VER%"=="13.0.2" set "VC_CMD=%ProgramFiles%\Microsoft Visual Studio\2022\Community\Common7\Tools\VsMSBuildCmd.bat"

      call "%VC_CMD%"

      set "CMAKE_ARGS=-G \"%GEN\" -H. -Bbuild -DXHASHCUDA=ON -DAPICORE=ON -DHUNTER_JOBS_NUMBER=%NUMBER_OF_PROCESSORS% -DXHASH_CUDA_ARCHS=%XHASH_CUDA_ARCHS%"
      cmake %CMAKE_ARGS%
      cmake --build build --config Release --target package
  - ps: |
      . build/hashwarp/buildinfo.ps1
      mv build/hashwarp.zip build/$env:project_name-$env:project_version-cuda$env:CUDA_VER-$env:system_name-$env:system_processor.zip

artifacts:
  - path: build/hashwarp-*.zip
    name: hashwarp

for:
  - matrix:
      only:
        - CUDA_VER: "13.0.2"
    image: Visual Studio 2022
