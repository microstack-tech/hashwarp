version: "{build}"

# Run on both Windows and Linux
image:
  - Ubuntu2204
  - Visual Studio 2017

branches:
  only:
    - main
    - /v\d+\..+/
    - /release.*/
    - appveyor
    - hunter

clone_depth: 100

environment:
  matrix:
    - CUDA_VER: "12.2.2"
      # Pascal (60,61,62), Volta (70,72), Turing (75), Ampere (80,86,87),
      # Ada (89), Hopper (90) â€” all supported by CUDA 12.2
      XHASH_CUDA_ARCHS: "60;61;62;70;72;75;80;86;87;89;90"
  HUNTER_CACHE_TOKEN:
    secure: VnpF1MH5MEFvUI5MiMMMFlmbDdst+bfom5ZFVgalYPp/SYDhbejjXJm9Dla/IgpC

# Cache (Windows CUDA installer). Linux job safely ignores this path.
cache:
  - C:\CUDAInstallers\cuda_12.2.2_537.13_windows.exe -> appveyor.yml

for:
  # --------- LINUX JOB (Ubuntu 22.04) ----------
  - matrix:
      only:
        - image: Ubuntu2204
    # OpenCL + CUDA toolkit build on Linux (no GPU needed on CI)
    install: |
      set -e
      export DEBIAN_FRONTEND=noninteractive
      git submodule update --init --recursive

      sudo apt-get update -o Acquire::Retries=5 -o Acquire::http::Timeout=30
      sudo apt install -y build-essential gcc g++ make wget pkg-config gcc-12 g++-12

      wget https://developer.download.nvidia.com/compute/cuda/12.2.2/local_installers/cuda-repo-ubuntu2204-12-2-local_12.2.2-535.104.05-1_amd64.deb
      sudo dpkg -i cuda-repo-ubuntu2204-12-2-local_12.2.2-535.104.05-1_amd64.deb
      sudo cp /var/cuda-repo-ubuntu2204-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/
      sudo apt update

      sudo apt install -y --no-install-recommends \
      cuda-compiler-12-2 cuda-nvcc-12-2 cuda-cudart-dev-12-2 \
      cuda-libraries-dev-12-2

      echo 'export PATH=/usr/local/cuda-12.2/bin:$PATH' | sudo tee /etc/profile.d/cuda-12-2.sh
      echo 'export LD_LIBRARY_PATH=/usr/local/cuda-12.2/lib64:${LD_LIBRARY_PATH}' | sudo tee -a /etc/profile.d/cuda-12-2.sh
      source /etc/profile.d/cuda-12-2.sh

      nvcc -V

    build_script: |
      set -e
      # Configure
      cmake -S . -B build \
        -DCMAKE_BUILD_TYPE=Release \
        -DHUNTER_JOBS_NUMBER=$(nproc) \
        -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.2/bin/nvcc \
        -DCMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-12 \
        -DCMAKE_CUDA_ARCHITECTURES="$XHASH_CUDA_ARCHS"
      cmake --build build --config Release --target package -j"$(nproc)"

      # Try to rename the package similarly to Windows
      # Prefer cpack artifacts if present; otherwise zip/tar the build dir.
      pkg="$(ls build/hashwarp-*.tar.gz 2>/dev/null || true)"
      if [ -n "$pkg" ]; then
        # If your CMake generates a buildinfo.sh, source it; otherwise, keep default name
        if [ -f build/hashwarp/buildinfo.sh ]; then
          . build/hashwarp/buildinfo.sh
          new="build/${project_name}-${project_version}-linux-$(uname -m).tar.gz"
          mv "$pkg" "$new"
          echo "Renamed package to: $new"
        else
          echo "Package produced: $pkg"
        fi
      else
        echo "No cpack artifact found; creating a fallback tarball."
        tar czf build/hashwarp-linux-$(uname -m).tar.gz -C build hashwarp || true
      fi

  # --------- WINDOWS JOB ----------
  - matrix:
      only:
        - image: Visual Studio 2017
    install: |
      git submodule update --init --recursive

      rem ----- Map CUDA_VER -> installer filename/URL and subpackages -----
      if "%CUDA_VER%"=="12.2.2" set "CUDA_ARCHIVE=cuda_12.2.2_537.13_windows.exe"
      if "%CUDA_VER%"=="12.2.2" set "CUDA_URL=https://developer.download.nvidia.com/compute/cuda/12.2.2/local_installers/%CUDA_ARCHIVE%"
      if "%CUDA_VER%"=="12.2.2" set "CUDA_SUBPKGS=nvcc_12.2 cudart_12.2 nvrtc_12.2 nvrtc_dev_12.2 nsight_vse_12.2 visual_studio_integration_12.2"

      if not exist "C:\CUDAInstallers" mkdir "C:\CUDAInstallers"
      if exist "C:\CUDAInstallers\%CUDA_ARCHIVE%" echo Using cached installer: C:\CUDAInstallers\%CUDA_ARCHIVE%
      if not exist "C:\CUDAInstallers\%CUDA_ARCHIVE%" echo Downloading %CUDA_ARCHIVE% ...
      if not exist "C:\CUDAInstallers\%CUDA_ARCHIVE%" curl -L "%CUDA_URL%" -o "C:\CUDAInstallers\%CUDA_ARCHIVE%"

      rem ----- Silent install (outer EXE): only needed subpackages, no reboot -----
      "C:\CUDAInstallers\%CUDA_ARCHIVE%" -s %CUDA_SUBPKGS% -n

      rem ----- Set CUDA_PATH and PATH -----
      set "CUDA_MAJOR_MINOR=%CUDA_VER:~0,4%"
      set "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v%CUDA_MAJOR_MINOR%"
      set "PATH=%CUDA_PATH%\bin;%PATH%"

      nvcc -V

      rem Python tools
      set "PATH=C:\Python39-x64;C:\Python39-x64\Scripts;%PATH%"
      pip install --disable-pip-version-check requests gitpython

    build_script:
      - call "%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Community\Common7\Tools\VsMSBuildCmd.bat"
      - set CMAKE_ARGS=-G "Visual Studio 15 2017 Win64" -H. -Bbuild -DHUNTER_JOBS_NUMBER=%NUMBER_OF_PROCESSORS% -DXHASH_CUDA_ARCHS=%XHASH_CUDA_ARCHS%
      - cmake %CMAKE_ARGS%
      - cmake --build build --config Release --target package
      - ps: |
          . build/hashwarp/buildinfo.ps1
          mv build/hashwarp.zip build/$env:project_name-$env:project_version-cuda$env:CUDA_VER-$env:system_name-$env:system_processor.zip

artifacts:
  - path: build/hashwarp-*.zip
    name: hashwarp
  - path: build/hashwarp-*.tar.gz
    name: hashwarp
